import binascii
import math

e = 1048583
d = 20899585599499852848600179189763086698516108548228367107221738096450499101070075492197700491683249172909869748620431162381087017866603003080844372390109407618883775889949113518883655204495367156356586733638609604914325927159037673858380872827051492954190012228501796895529660404878822550757780926433386946425164501187561418082866346427628551763297010068329425460680225523270632454412376673863754258135691783420342075219153761633410012733450586771838248239221434791288928709490210661095249658730871114233033907339401132548352479119599592161475582267434069666373923164546185334225821332964035123667137917080001159691927
x = 22886390627173202444468626406642274959028635116543626995297684671305848436910064602418012808595951325519844918478912090039470530649857775854959462500919029371215000179065185673136642143061689849338228110909931445119687113803523924040922470616407096745128917352037282612768345609735657018628096338779732460743
y = 138356012157150927033117814862941924437637775040379746970778376921933744927520585574595823734209547857047013402623714044512594300691782086053475259157899010363944831564630625623351267412232071416191142966170634950729938561841853176635423819365023039470901382901261884795304947251115006930995163847675576699331
C = binascii.unhexlify(b'32074de818f2feeb788e36d7d3ee09f0000381584a72b2fba0dcc9a2ebe5fd79cf2d6fd40c4dbfea27d3489704f2c1a30b17a783baa67229d02043c5bc9bdb995ae984d80a96bd79370ea2c356f39f85a12d16983598c1fb772f9183441fea5dfeb5b26455df75de18ce70a6a9e9dbc0a4ca434ba94cf4d1e5347395cf7aafa756c8a5bd6fd166bc30245a4bded28f5baac38d024042a166369f7515e8b0c479a1965b5988b350064648738f6585c0a0d1463bd536d11a105bb926b44236593b5c6c71ef5b132cd9c211e8ad9131aa53ffde88f5b0df18e7c45bcdb6244edcaa8d386196d25297c259fca3be37f0f2015f40cb5423a918c51383390dfd5a8703')

num = 0
for char in C:
    num += char
    num <<= 8
C = num >> 8

possible_phi = set()
for k in range(2,e+1):
    if (d*e - 1)%k == 0:
        possible_phi.add((d*e - 1)//k)

def is_square(num):
    upper_bound = num
    lower_bound = 0
    mid = (upper_bound + lower_bound)//2
    while (mid != upper_bound) and (mid != lower_bound):
        if mid**2 > num:
            upper_bound = mid
        elif mid**2 < num:
            lower_bound = mid
        else:
            return(mid)
        mid = (upper_bound + lower_bound)//2
    if mid**2 == num:
        return(mid)
    else:
        return(False)

def find_kq():
    a = x - 1
    c = (x*y - 1)*(y - 1)
    for phi in possible_phi:
        b = 2*x*y - x - y - phi
        sqroot = is_square(b**2 - 4*a*c)
        if sqroot != False:
            k = (-1*b) + sqroot
            if k%(2*a) == 0:
                k //= (2*a)
                return(k)

k_q = find_kq()
k_p = (x*y - 1)//k_q

def int2byte(num):
    out = []
    while num > 0:
        out = [num%0xff] + out
        num >>= 8
    return(bytes(out))

N = (x + k_p)*(y + k_q)
plain = pow(C,d,N)
message = int2byte(plain)

print(message)
